package org.example.sysdesign.model;

import io.quarkus.mongodb.panache.reactive.ReactivePanacheMongoEntity;
import io.quarkus.runtime.annotations.RegisterForReflection;

import org.antlr.v4.runtime.misc.Pair;
import org.bson.types.ObjectId;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Date;
import java.util.Objects;

/**
 * This class is used to represent a staffmember in the system.
 */

@RegisterForReflection
public class Staffmember extends ReactivePanacheMongoEntity {

    private String name;
    private Date accepted;
    private String type;
    private Date planned;

    /**
     * Create a new staffmember
     * 
     * @param id           - Id for the staffmember (should be generated by the
     *                     storage driver).
     * @param name         - name of the staffmember
     * @param accepted     - date of acceptance
     * @param type         - type of staffmember: guard, guide or cleaning staff
     * @param planned      - day of planned shift
     */
    public Staffmember(){}
    
    public Staffmember(ObjectId id, String name, Date accepted, String type, Date planned){
        this.id = id;
        this.name = name;
        this.accepted = accepted;
        this.type = type;
        this.planned = planned;
    }

    public Staffmember(String name, Date accepted, String type, Date planned) {
        this(null, name, accepted, type, planned);
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Date getAccepted() {
        return this.accepted;
    }

    public void setAccepted(Date accepted) {
        this.accepted = accepted;
    }

    public String getType() {
        return this.type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Date getPlanned() {
        return this.planned;
    }
    
    public void setPlanned(Date planned) {
        this.planned = planned;
    }

    @Override
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof Staffmember)) {
            return false;
        }
        Staffmember staffmember = (Staffmember) o;
        return Objects.equals(id, staffmember.id) && Objects.equals(name, staffmember.name) && Objects.equals(accepted, staffmember.accepted) && Objects.equals(type, staffmember.type) && Objects.equals(planned, staffmember.planned);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, accepted, type, planned);
    }
}