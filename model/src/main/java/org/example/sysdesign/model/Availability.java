package org.example.sysdesign.model;

import io.quarkus.mongodb.panache.reactive.ReactivePanacheMongoEntity;
import io.quarkus.mongodb.panache.reactive.ReactivePanacheMongoEntityBase;
import io.quarkus.runtime.annotations.RegisterForReflection;

import org.bson.codecs.pojo.annotations.BsonId;
import org.bson.types.ObjectId;

import java.util.Date;
import java.util.Objects;

/**
 * Class for representing a museum ticket.
 */
@RegisterForReflection
public class Availability extends ReactivePanacheMongoEntity {
    
    public String date;
    private int amount;

    /**
     * Create a new rating
     * 
     * @param id                 - Id for the order (should be generated by the
     *                              storage driver).
     * @param amount            - Number of tickets ordered.
     * @param email             - Email of client.
     * @param guided            - Is the visit guided or unguided (does a guide need to be provided)
     */
    public Availability() {
    }

    public Availability(Date date, int amount) {
        this(null, date, amount);
    }

    public Availability(ObjectId id ,Date date, int amount) {
        this.date = date.toString();
        this.amount = amount;
        this.id = id;
    }

    public int getAmount(){
        return this.amount;
    }

    public void setAmount(int amount){
        this.amount = amount;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
     Availability av =  (Availability) o;
        return this.date == av.date;
    }

    @Override
    public int hashCode() {
        return Objects.hash(date);
    }

    public String getDate() {
        return this.date;
    }
}
