package org.example.sysdesign.model;

import io.quarkus.mongodb.panache.reactive.ReactivePanacheMongoEntity;
import io.quarkus.runtime.annotations.RegisterForReflection;
import org.bson.types.ObjectId;

import java.util.Date;
import java.util.Objects;

/**
 * Class for representing a museum ticket.
 */
@RegisterForReflection
public class Ticket extends ReactivePanacheMongoEntity {

    public enum Status{
        VERIFIED,
        IN_PROGRESS,
        DENIED
    }

    private int amount;
    private Date date;
    private String email;
    private Boolean guided;
    private Status verified;

    public Ticket(){
        
    }
    /**
     * Create a new rating
     * 
     * @param id                 - Id for the order (should be generated by the
     *                              storage driver).
     * @param amount            - Number of tickets ordered.
     * @param email             - Email of client.
     * @param guided            - Is the visit guided or unguided (does a guide need to be provided)
     */
    public Ticket(ObjectId id,Date date, int amount, String email, Boolean guided) {
        this.id = id; //also order_id
        this.amount = amount;
        this.email = email;
        this.guided = guided;
        this.verified = Status.IN_PROGRESS;
    }
    public Ticket(Date date, int amount, String email, Boolean guided) {
        this(null,date, amount, email, guided);
    }

    /**
     * Get the type of visit
     *
     * @return True is guided visit.
     */
    public boolean getGuided() {
        return guided;
    }

    /**
     * Set the type of visit.
     *
     * @param guided - Boolean true if guided visit.
     */
    public void setGuided(boolean guided){
        this.guided = guided;
    }

    /**
     * Get the amount of visitors
     *
     * @return Amount of visitors in ticket.
     */
    public int getAmount(){
        return this.amount;
    }

    /**
     * Set the amount of visitors
     * @param amount - Amount of visitors requested.
     */
    public void setAmount(int amount){
        this.amount = amount;
    }

        /**
     * Get the amount of visitors
     *
     * @return Amount of visitors in ticket.
     */
    public Date getDate(){
        return this.date;
    }

    /**
     * Set the amount of visitors
     * @param amount - Amount of visitors requested.
     */
    public void setDate(Date date){
        this.date = date;
    }

    /**
     * Get the user email
     *
     * @return User email.
     */
    public String getEmail(){
        return this.email;
    }

    /**
     * Set the user email
     * @param email - User email.
     */
    public void setEmail(String email){
        this.email = email;
    }

    /**
     * Get the order id
     *
     * @return Order id.
     */
    public ObjectId getOrderId(){
        return this.id;
    }

        /**
     * Set the user email
     * @param email - User email.
     */
    public void setVerified(Status verified){
        this.verified = verified;
    }

    /**
     * Get the order id
     *
     * @return Order id.
     */
    public Status getVerified(){
        return this.verified;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
     Ticket ticket =  (Ticket) o;
        return Objects.equals(id, ticket.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    public void getTicketDate(){
        
    }
}
