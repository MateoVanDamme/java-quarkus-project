package org.example.sysdesign.model;

import io.quarkus.mongodb.panache.reactive.ReactivePanacheMongoEntity;
import io.quarkus.runtime.annotations.RegisterForReflection;
import org.bson.types.ObjectId;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Objects;

/**
 * Class for representing a Chat rating (not to be confused with a Kafka
 * rating!)
 * It extends ReactivePanacheMongoEntity, making this entity an
 * <a href=
 * "https://quarkus.io/guides/mongodb-panache#solution-1-using-the-active-record-pattern">Active
 * Record </a>.
 * <p>
 * Ideally, the storage concerns would not be tied to the model definition, as
 * this prevents easily switching between
 * storage implementations. However, this approach serves this demonstrator for
 * the sake of simplicity.
 */
@RegisterForReflection
public class Rating extends ReactivePanacheMongoEntity {

    private Instant createdAt;
    private String author;
    private String paintingId;
    private String content;
    private Integer rating;

    public Rating() {
    }

    /**
     * Create a new rating
     * 
     * @param id               - Id for the rating (should be generated by the
     *                         storage driver).
     * @param createdAt        - Timestamp at which the rating was created.
     * @param author           - The id of the author of the message.
     * @param paintingId - The id of the painting the rating is for
     * @param content          - Optional content of the rating.
     * @param rating           - Rating for the painting out of 10
     */
    public Rating(ObjectId id, Instant createdAt, String author, String paintingId, String content,
            Integer rating) {
        this.id = id;
        this.createdAt = createdAt;
        this.author = author;
        this.paintingId = paintingId;
        this.content = content;
        this.rating = rating;
    }

    /**
     * Create a new Rating.
     *
     * @param author            - Id of the author of the rating.
     * @param paintingId        - The id of the painting the rating is for
     * @param content           - Optional content of the rating.
     */
    public Rating(String author, String paintingId, String content, Integer rating) {
        this(null, Instant.now().truncatedTo(ChronoUnit.MILLIS), author, paintingId, content, rating);
    }

    /**
     * Get the timestamp at which the rating was created.
     *
     * @return an instance of Instant
     */
    public Instant getCreatedAt() {
        return createdAt;
    }

    /**
     * Set the timestamp at which the rating was created.
     *
     * @param createdAt - Timestamp at which the rating was created.
     */
    public void setCreatedAt(Instant createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Get the id of the author of the rating.
     *
     * @return a String instance.
     */
    public String getAuthor() {
        return author;
    }

    /**
     * Set the id of the author the rating.
     *
     * @param author - Id of the author of the rating.
     */
    public void setAuthor(String author) {
        this.author = author;
    }

    /**
     * Get the paintingId of the rating.
     *
     * @return a String instance
     */
    public String getPaintingId() {
        return paintingId;
    }

    /**
     * Set the paintingId of the rating.
     *
     * @param paintingId - paintingId of the rating.
     */
    public void setPaintingId(String paintingId) {
        this.paintingId = paintingId;
    }

    /**
     * Get the content of the rating.
     *
     * @return a String instance
     */
    public String getContent() {
        return content;
    }

    /**
     * Set the content of the rating.
     *
     * @param content - The content of the rating.
     */
    public void setContent(String content) {
        this.content = content;
    }

    /**
     * Get the rating of the rating.
     *
     * @return a String instance
     */
    public Integer getRating() {
        return rating;
    }

    /**
     * Set the rating of the rating.
     *
     * @param content - The rating of the rating.
     */
    public void setRating(Integer rating) {
        this.rating = rating;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        Rating rating = (Rating) o;
        return Objects.equals(id, rating.id)
                && createdAt.equals(rating.createdAt)
                && author.equals(rating.author)
                && paintingId.equals(rating.paintingId) && Objects.equals(content, rating.content)
                && this.rating == rating.rating;
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, createdAt, author, paintingId, content, rating);
    }
}
