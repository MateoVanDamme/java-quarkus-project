package org.example.sysdesign.model;

import io.quarkus.mongodb.panache.reactive.ReactivePanacheMongoEntity;
import io.quarkus.runtime.annotations.RegisterForReflection;
import org.bson.types.ObjectId;

import java.util.Objects;
/**
 * Class for representing the catalogus of a museum that holds all paintings
 * The catalogus saves info of all paintings. 
 * Paintings can be added, removed and updated.
 * CatalogusItem = painting
 */
@RegisterForReflection
public class CatalogusItem extends ReactivePanacheMongoEntity{
    public CatalogusItem() {

    }
    private String name;
    private String artist;
    private String description;
    private String style;
    private String exhibitionID;
    private String location;

    /**
     * Create a new catalogus item
     * 
     * @param id                 - Id for the paiting.
     * @param name               - name of the painting.
     * @param artist             - artist that painted the painting.
     * @param description        - description of the painting.
     * @param style              - style of the painting.
     * @param exhibitionID       - exhibition in which the painting is shown.
     * @param location           - location where the painting is displayed.
     * 
     */
    public CatalogusItem(ObjectId id, String name, String artist, String description, String style, String exhibitionID, String location) {
        this.id = id;
        this.name = name;
        this.artist = artist;
        this.description = description;
        this.style = style;
        this.exhibitionID = exhibitionID;
        this.location = location;
    }

    /**
     * Create a new catalogus item, without giving the ID, the ID will be generated by the system
     * 
     * @param name               - name of the painting.
     * @param artist             - artist that painted the painting.
     * @param description        - description of the painting.
     * @param style              - style of the painting.
     * @param exhibitionID       - exhibition in which the painting is shown.
     * @param location           - location where the painting is displayed.
     * 
     */
    public CatalogusItem( String name, String artist, String description, String style, String exhibitionID, String location){
        this(null, name, artist, description, style, exhibitionID, location);
    }

    /**
     * Get the name of the painting
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name of the painting
     * @param name - name of the painting
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Get the artist of the painting
     */
    public String getArtist() {
        return this.artist;
    }

    /**
     * Set the artist of the painting
     * @param artist - artist of the painting
     */
    public void setArtist(String artist) {
        this.artist = artist;
    }

    /**
     * Get the description of the painting
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description of the painting
     * @param description - description of the painting
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Get the style of the painting
     */
    public String getStyle() {
        return this.style;
    }

    /**
     * Set the style of the painting
     * @param style - style of the painting
     */
    public void setStyle(String style) {
        this.style = style;
    }

    /**
     * Get the exhibition in which the painting is shown
     */
    public String getExhibitionID() {
        return this.exhibitionID;
    }

    /**
     * Set the exhibition in which the painting is shown
     * @param exhibitionID - exhibition in which the painting is shown
     */
    public void setExhibitionID(String exhibitionID) {
        this.exhibitionID = exhibitionID;
    }

    /**
     * Get the location where the painting is displayed
     */
    public String getLocation() {
        return this.location;
    }

    /**
     * Set the location where the painting is displayed
     * @param location - location where the painting is displayed
     */
    public void setLocation(String location) {
        this.location = location;
    }

    /**
     * Function to compare two catalogus items
     */
    @Override
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof CatalogusItem)) {
            return false;
        }
        CatalogusItem catalogusItem = (CatalogusItem) o;
        return Objects.equals(id, catalogusItem.id) && Objects.equals(name, catalogusItem.name) && Objects.equals(artist, catalogusItem.artist) && Objects.equals(description, catalogusItem.description) && Objects.equals(style, catalogusItem.style) && Objects.equals(exhibitionID, catalogusItem.exhibitionID) && Objects.equals(location, catalogusItem.location);
    }

    /**
     * Function to get the hashcode of a catalogus item
     */
    @Override
    public int hashCode() {
        return Objects.hash(id, name, artist, description, style, exhibitionID, location);
    }
    
}
